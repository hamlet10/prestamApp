// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using PrestamApp.Persistence;

namespace PrestamApp.Persistence.Migrations
{
    [DbContext(typeof(PrestamAppDbContext))]
    [Migration("20190615174603_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PrestamApp.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressDataId");

                    b.Property<int>("AddressTypeId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Geometry>("Location");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Refference")
                        .HasMaxLength(30);

                    b.Property<string>("Street")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("AddressDataId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 2,
                            AddressTypeId = 1,
                            Refference = "Villa Tropical",
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 3,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 4,
                            AddressTypeId = 1,
                            Street = "El Tamarindo, Calle La Ciencia No. 2"
                        },
                        new
                        {
                            Id = 5,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 6,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 7,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 8,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 9,
                            AddressTypeId = 1,
                            Street = "El Tamarindo"
                        },
                        new
                        {
                            Id = 10,
                            AddressTypeId = 1,
                            Refference = "La Gallera",
                            Street = "El Tamarindo"
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.AddressData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressDataID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Geometry>("Coordinate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int>("LevelId");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("AddressData");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Casa"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Oficina"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Otros"
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Collector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CollectorID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberOne")
                        .IsRequired()
                        .HasColumnName("PhoneNumber1");

                    b.Property<string>("PhoneNumberTwo")
                        .HasColumnName("PhoneNumber2");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Collectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Maimón, Bonao, Calle Principal No. 5",
                            Email = "Francis@test.com",
                            Name = "Francis",
                            PhoneNumberOne = "8095555555",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hacienda Estrella No. 5",
                            Email = "Ruddy@test.com",
                            Name = "Ruddy",
                            PhoneNumberOne = "8095555555",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId");

                    b.Property<string>("ContactNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasDefaultValue("C-000");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumberOne")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhoneNumberTwo")
                        .HasMaxLength(50);

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ContactNumber = "C-001",
                            Gender = false,
                            IdentificationNumber = "001-0349060-3",
                            LastName = "Cuevas Cabrera",
                            Name = "Alba",
                            PhoneNumberOne = "829-592-2920",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ContactNumber = "C-002",
                            Gender = false,
                            IdentificationNumber = "223-0005438-2",
                            LastName = "Zapata",
                            Name = "Mery Elizabeth",
                            PhoneNumberOne = "555-555-5555",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ContactNumber = "C-003",
                            Gender = true,
                            IdentificationNumber = "076-0010914-9",
                            LastName = "Nova Florian",
                            Name = "Erasmo",
                            PhoneNumberOne = "809-509-1947",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ContactNumber = "C-004",
                            Gender = false,
                            IdentificationNumber = "024-0016983-4",
                            LastName = "Hernandez",
                            Name = "Adela",
                            PhoneNumberOne = "829-260-2377",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ContactNumber = "C-005",
                            Gender = true,
                            IdentificationNumber = "402-2321927-6",
                            LastName = "Aguas Vivas",
                            Name = "Janser Michael",
                            PhoneNumberOne = "555-555-5555",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ContactNumber = "C-006",
                            Gender = true,
                            IdentificationNumber = "013-0023998-3",
                            LastName = "Rodríguez",
                            Name = "Rikelvin Alberto",
                            PhoneNumberOne = "849-252-2039",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            ContactNumber = "C-007",
                            Gender = true,
                            IdentificationNumber = "108-0001178-4",
                            LastName = "Mora Montero",
                            Name = "Castulo",
                            PhoneNumberOne = "829-905-9263",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            ContactNumber = "C-008",
                            Gender = true,
                            IdentificationNumber = "001-1419722-1",
                            LastName = "Ferjuste",
                            Name = "Daniel",
                            PhoneNumberOne = "555-555-5555",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            ContactNumber = "C-009",
                            Gender = true,
                            IdentificationNumber = "001-1527870-7",
                            LastName = "Montero Montero",
                            Name = "Franklin",
                            PhoneNumberOne = "829-298-4775",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            ContactNumber = "C-010",
                            Gender = true,
                            IdentificationNumber = "001-0229497-2",
                            LastName = "Casamora Montero",
                            Name = "Nestor",
                            PhoneNumberOne = "809-861-9080",
                            ZoneId = 2
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Due", b =>
                {
                    b.Property<int>("DueID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdvancePayment");

                    b.Property<decimal>("CapitalAmount");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("DueIsPaidOff");

                    b.Property<int>("DueNumber");

                    b.Property<decimal>("InterestAmount");

                    b.Property<decimal>("LateFee");

                    b.Property<int>("LoanID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("PaymentAmount");

                    b.Property<decimal>("PendingBalance");

                    b.HasKey("DueID");

                    b.HasIndex("LoanID");

                    b.ToTable("Dues");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.DuePayment", b =>
                {
                    b.Property<int>("DueID");

                    b.Property<int>("PaymentID");

                    b.HasKey("DueID", "PaymentID");

                    b.HasIndex("PaymentID");

                    b.ToTable("DuesPayments");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoanID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("ContactId")
                        .HasColumnName("ContactID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("Interest");

                    b.Property<decimal>("InterestRate");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("LoanAmount");

                    b.Property<DateTime>("LoanDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("NumberOfDue");

                    b.Property<int?>("NumberOfDuesPaid")
                        .HasColumnName("NumeroCuotasPagadas");

                    b.Property<bool>("SimpleInterest");

                    b.Property<int>("TimeFrameId")
                        .HasColumnName("TimeFrameID");

                    b.Property<decimal>("TotalBalance");

                    b.Property<decimal>("TotalCapitalAmount");

                    b.Property<bool>("UpToDate");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CapitalAmount");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("InterestAmount");

                    b.Property<decimal>("LateFee");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("PendigBalance");

                    b.Property<decimal>("TotalBalance");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.PersonalRefference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonalRefferenceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<int>("ContactId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<Geometry>("Location");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumberOne");

                    b.Property<string>("PhoneNumberTwo");

                    b.Property<int>("RelationShipTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RelationShipTypeId");

                    b.ToTable("PersonalRefferences");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.RelationShipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("RelationShipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Familiar"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Vecino"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comapañero de Trabajo"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Comapañero de Estudio"
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ZoneID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pradera Verde"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Intec"
                        });
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.ZoneCollector", b =>
                {
                    b.Property<int>("CollectorId");

                    b.Property<int>("ZoneId");

                    b.HasKey("CollectorId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneCollectors");
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Address", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.AddressData", "AddressData")
                        .WithMany("Address")
                        .HasForeignKey("AddressDataId");

                    b.HasOne("PrestamApp.Domain.Entities.AddressType", "AddressType")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Contact", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrestamApp.Domain.Entities.Zone", "Zone")
                        .WithMany("Contacts")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Due", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Loan", "Loans")
                        .WithMany("Dues")
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.DuePayment", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Due", "Due")
                        .WithMany("DuesPayments")
                        .HasForeignKey("DueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrestamApp.Domain.Entities.Payment", "Payment")
                        .WithMany("DuesPayments")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.Loan", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Contact", "Contact")
                        .WithMany("Loans")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.PersonalRefference", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Contact", "Contact")
                        .WithMany("PersonalRefferences")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrestamApp.Domain.Entities.RelationShipType", "RelationShipType")
                        .WithMany("personalRefferences")
                        .HasForeignKey("RelationShipTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrestamApp.Domain.Entities.ZoneCollector", b =>
                {
                    b.HasOne("PrestamApp.Domain.Entities.Collector", "Collector")
                        .WithMany("ZoneCollectors")
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrestamApp.Domain.Entities.Zone", "Zone")
                        .WithMany("ZoneCollectors")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
